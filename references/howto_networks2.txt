
#########################################################
docker Configure the default network
#########################################################

https://stackoverflow.com/questions/56582446/how-to-use-host-network-for-docker-compose
https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode
https://docs.docker.com/compose/networking/
https://accesto.com/blog/docker-networks-explained-part-2/

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
version: "3.9"
services:
  app:
    image: nginx:alpine
    networks:
      app_net:
        ipv4_address: 172.16.238.10
        ipv6_address: 2001:3984:3989::10

networks:
  app_net:
    ipam:
      driver: default
      config:
        - subnet: "172.16.238.0/24"
        - subnet: "2001:3984:3989::/64"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
version: "3.9"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    secrets:
      - my_secret
      - my_other_secret
secrets:
  my_secret:
    file: ./my_secret.txt
  my_other_secret:
    external: true

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
version: "3.9"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    secrets:
      - source: my_secret
        target: redis_secret
        uid: '103'
        gid: '103'
        mode: 0440
secrets:
  my_secret:
    file: ./my_secret.txt
  my_other_secret:
    external: true

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
version: "3.9"
services:
  web:
    image: nginx:alpine
    volumes:
      - type: volume
        source: mydata
        target: /data
        volume:
          nocopy: true
      - type: bind
        source: ./static
        target: /opt/app/static

  db:
    image: postgres:latest
    volumes:
      - "/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock"
      - "dbdata:/var/lib/postgresql/data"

volumes:
  mydata:
  dbdata:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
version: "3.9"
services:
  web:
    build: .
    ports:
      - "8000:8000"
  db:
    image: postgres

networks:
  default:
    # Use a custom driver
    driver: custom-driver-1

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

version: '3.6'
services:
  phpmyadmin:
    image: phpmyadmin
    ports:
      - 8080:80


version: '3.6'
services:
  phpmyadmin:
    image: phpmyadmin
    ports:
      - 127.0.0.1:8080:80


version: '3.6'
services:
  db:
    image: mariadb:10.3
    environment:
      MYSQL_ROOT_PASSWORD: secret
  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - 8080:80
    environment:
      - PMA_HOSTS=db



version: '3.6'
services:
  service1-db:
    image: mariadb:10.3
    environment:
      MYSQL_ROOT_PASSWORD: secret
  service1-web:
    image: nginxdemos/hello
    ports:
      - 80:80
  service2-db:
    image: mariadb:10.3
    environment:
      MYSQL_ROOT_PASSWORD: secret
  service2-web:
    image: nginxdemos/hello
    ports:
      - 81:80

docker-compose exec service1-web ash

version: '3.6'
services:
  service1-db:
    image: mariadb:10.3
    environment:
      MYSQL_ROOT_PASSWORD: secret
    networks:
      - service1
  service1-web:
    image: nginxdemos/hello
    ports:
      - 80:80
    networks:
      - service1
      - web
  service2-db:
    image: mariadb:10.3
    environment:
      MYSQL_ROOT_PASSWORD: secret
    networks:
      - service2
  service2-web:
    image: nginxdemos/hello
    ports:
      - 81:80
    networks:
      - service2
      - web

networks:
  service1:
  service2:
  web:


docker-compose exec service1-web ash

-------
two docker-compose.yaml

#service1/docker-compose.yaml
version: '3.6'
services:
  service1-db:
    image: mariadb:10.3
    environment:
      MYSQL_ROOT_PASSWORD: secret
  service1-web:
    image: nginxdemos/hello
    ports:
      - 80:80

#service2/docker-compose.yaml
version: '3.6'
services:
  service2-db:
    image: mariadb:10.3
    environment:
      MYSQL_ROOT_PASSWORD: secret
  service2-web:
    image: nginxdemos/hello
    ports:
      - 81:80


docker-compose up -d

---------------------

version: '3.6'
services:
  service1-db:
    image: mariadb:10.3
    environment:
      MYSQL_ROOT_PASSWORD: secret
    networks:
      - service1
  service1-web:
    image: nginxdemos/hello
    ports:
      - 80:80
    networks:
      - service1
      - web

networks:
  service1:
  web:
    name: shared-web

---------------------

version: '3.6'
services:
  service2-db:
    image: mariadb:10.3
    environment:
      MYSQL_ROOT_PASSWORD: secret
    networks:
      - service2
  service2-web:
    image: nginxdemos/hello
    ports:
      - 81:80
    networks:
      - service2
      - web

networks:
  service2:
  web:
    external: true #needs to be created by other file
    name: shared-web

---------------------

docker run -it --rm --name demo-ping alpine ping 8.8.8.8
pumba netem --duration 5s --tc-image gaiadocker/iproute2 delay --time 3000 demo-ping


