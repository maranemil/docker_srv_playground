
#########################################################
Best way to reduce the size of a custom Docker image
#########################################################
https://stackoverflow.com/questions/41332673/best-way-to-reduce-the-size-of-a-custom-docker-image

Dockerfile:

FROM php:7.0.14-fpm-alpine

COPY ./config/www-pool.conf /usr/local/etc/php-fpm.d/www.conf
COPY ./scripts/download-composer.sh /root/download-composer.sh

WORKDIR /root

RUN chmod +x download-composer.sh \
    && ./download-composer.sh \
    && mv composer.phar /usr/local/bin/composer

RUN ["mkdir", "/var/log/php-fpm"]

RUN apk --update add \
      autoconf g++ make \
      openssl-dev \
      libxml2-dev

RUN pecl install \
        xdebug \
        mongodb

RUN docker-php-ext-enable \
        xdebug.so \
        mongodb.so

RUN  docker-php-ext-install \
        pdo_mysql \
        soap

RUN addgroup sudo
RUN adduser -S luqo33 -G sudo
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

/*
PHP extensions:

    mongodb
    xdebug
    pdo
    soap
*/




rm -rf /var/cache/apk/*

FROM php:7.0.14-fpm-alpine

WORKDIR /root

RUN ["mkdir", "/var/log/php-fpm"]

RUN apk --update add \
      autoconf g++ make \
      openssl-dev \
      libxml2-dev \
  && rm -rf /var/cache/apk/*

RUN apk --update add \
      autoconf g++ make \
      openssl-dev \
      libxml2-dev \
    && pecl install \
        xdebug \
        mongodb \
    && docker-php-ext-enable \
        xdebug.so \
        mongodb.so \
    && docker-php-ext-install \
        pdo_mysql \
        soap \
    && apk del autoconf g++ make openssl-dev libxml2-dev \
    && rm -rf /var/cache/apk/*



#########################################################
https://github.com/docker-library/php/issues/1049
#########################################################


FROM php:8.0-rc-fpm-alpine
MAINTAINER Ambroise Maupate <ambroise@rezo-zero.com>

RUN apk --no-cache update \
    && apk --no-cache upgrade \
    && apk add --no-cache --virtual \
        .build-deps \
        $PHPIZE_DEPS \
        gcc \
        g++ \
        autoconf \
        tar \
    && apk add --no-cache \
        libxslt-dev \
        tidyhtml-dev \
        net-snmp-dev \
        aspell-dev \
        freetds-dev \
        openldap-dev \
        gettext-dev \
        imap-dev \
        openssh \
        sudo \
        make \
        shadow \
        libmcrypt-dev \
        gmp-dev \
        openssl \
        mariadb-client \
        curl \
        freetype \
        libpng \
        libjpeg-turbo \
        freetype-dev \
        libpng-dev \
        libjpeg-turbo-dev \
        libwebp-dev \
        libzip-dev \
        bzip2-dev \
        postgresql-dev \
        supervisor \
        bash \
        nginx \
        pngquant \
        jpegoptim \
        zip \
        icu-dev \
        libxml2-dev \
        dcron \
        wget \
        rsync \
        ca-certificates \
        oniguruma-dev \
    && phpModules=" \
            bcmath \
            bz2 \
            calendar \
            exif \
            gd \
            gettext \
            gmp \
            imap \
            intl \
            ldap \
            mysqli \
            pcntl \
            pdo_dblib \
            pdo_mysql \
            pdo_pgsql \
            pgsql \
            pspell \
            shmop \
            snmp \
            soap \
            sockets \
            sysvmsg \
            sysvsem \
            sysvshm \
            tidy \
            xsl \
        " \
    && NPROC=$(getconf _NPROCESSORS_ONLN) \
    && docker-php-ext-configure gd --enable-gd --with-freetype --with-jpeg --with-webp \
#    Install APCU
#    @see https://github.com/docker-library/php/issues/1029
    && mkdir -p /usr/src/php/ext/apcu  \
    && mkdir -p /usr/src/php/ext/amqp  \
    && mkdir -p /usr/src/php/ext/igbinary  \
    && mkdir -p /usr/src/php/ext/mongodb  \
    && mkdir -p /usr/src/php/ext/redis  \
    && curl -fsSL https://pecl.php.net/get/apcu | tar xvz -C "/usr/src/php/ext/apcu" --strip 1 \
    && curl -fsSL https://pecl.php.net/get/amqp | tar xvz -C "/usr/src/php/ext/amqp" --strip 1 \
    && curl -fsSL https://pecl.php.net/get/igbinary | tar xvz -C "/usr/src/php/ext/igbinary" --strip 1 \
    && curl -fsSL https://pecl.php.net/get/mongodb | tar xvz -C "/usr/src/php/ext/mongodb" --strip 1 \
    && curl -fsSL https://pecl.php.net/get/redis | tar xvz -C "/usr/src/php/ext/redis" --strip 1 \
    && docker-php-ext-install -j${NPROC} $phpModules \
    && apk del --no-cache gcc g++ freetype-dev libpng-dev libjpeg-turbo-dev .build-deps




docker build . -t php:test

 FROM php:8.0-rc-fpm-alpine
 MAINTAINER Ambroise Maupate <ambroise@rezo-zero.com>
 RUN apk --no-cache update     && apk --no-cache upgrade     && apk add --no-cache --virtual





#########################################################
https://github.com/made/docker_alpine-nginx-php8
https://hub.docker.com/_/wordpress/
#########################################################

version: '3.1'

services:

  wordpress:
    image: wordpress
    restart: always
    ports:
      - 8080:80
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: exampleuser
      WORDPRESS_DB_PASSWORD: examplepass
      WORDPRESS_DB_NAME: exampledb
    volumes:
      - wordpress:/var/www/html

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: exampledb
      MYSQL_USER: exampleuser
      MYSQL_PASSWORD: examplepass
      MYSQL_RANDOM_ROOT_PASSWORD: '1'
    volumes:
      - db:/var/lib/mysql

volumes:
  wordpress:
  db:




FROM wordpress:apache
WORKDIR /usr/src/wordpress
RUN set -eux; \
    find /etc/apache2 -name '*.conf' -type f -exec sed -ri -e "s!/var/www/html!$PWD!g" -e "s!Directory /var/www/!Directory $PWD!g" '{}' +; \
    cp -s wp-config-docker.php wp-config.php
COPY custom-theme/ ./wp-content/themes/custom-theme/
COPY custom-plugin/ ./wp-content/plugins/custom-plugin/

#FROM wordpress:tag
#COPY custom.ini $PHP_INI_DIR/conf.d/







#########################################################
How To Install and Use Docker Compose on Ubuntu 20.04
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-compose-on-ubuntu-20-04
#########################################################

sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version

mkdir ~/compose-demo
cd ~/compose-demo
mkdir app
nano app/index.html

~/compose-demo/app/index.html

<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Docker Compose Demo</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/kognise/water.css@latest/dist/dark.min.css">
</head>
<body>

    <h1>This is a Docker Compose Demo Page.</h1>
    <p>This content is being served by an Nginx container.</p>

</body>
</html>


nano docker-compose.yml

version: '3.7'
services:
  web:
    image: nginx:alpine
    ports:
      - "8000:80"
    volumes:
      - ./app:/usr/share/nginx/html

docker-compose up -d
docker-compose ps
docker-compose logs
docker-compose pause
docker-compose unpause
docker-compose down
docker image rm nginx:alpine


#########################################################
How to Use a Secret in docker-compose.yml
#########################################################
https://www.rockyourcode.com/using-docker-secrets-with-docker-compose/

printf "my_db_user" | docker secret create db_user -
printf "superSecretDBpassword" | docker secret create db_password -

Error response from daemon: This node is not a swarm manager.
Use "docker swarm init" or "docker swarm join" to connect this node to swarm and try again.



version: '3'

secrets:
  db_user:
    external: true
  db_password:
    external: true

version: '3'

secrets:
  db_user:
    file: ./my_db_user.txt
  db_password:
    file: ./my_db_pass.txt


version: '3'

secrets:
  db_user:
    external: true
  db_password:
    external: true

services:
  postgres_db:
  image: postgres
  secrets:
    - db_user
    - db_password


 secrets are stored as files.

Example:

version: '3'

secrets:
  db_user:
    external: true
  db_password:
    external: true

services:
  postgres_db:
  image: postgres
  secrets:
    - db_user
    - db_password
  environment:
    - POSTGRES_USER_FILE=/run/secrets/db_user
    - POSTGRES_PASSWORD_FILE=/run/secrets/db_password




###################################################
Docker Compose Explained
###################################################
https://medium.com/codex/docker-compose-explained-3954baf495ec


docker network create mysql-network

Create MySQL Docker container.

docker run -d -p 3307:3306 \
    -e MYSQL_ROOT_PASSWORD=password \
    --name mysqldb \
    --net mysql-network \
    mysql

Create phpMyAdmin Docker container.

docker run -d -p 8082:80 \
    -e PMA_HOST=mysqldb \
    --name phpmyadmin \
    --net mysql-network \
    phpmyadmin:5.1-apache

docker-compose -f mysql.yaml up -d
docker-compose -f mysql.yaml down




###################################################
Docker File vs Docker Compose
###################################################
https://linuxhandbook.com/docker-file-vs-docker-compose/

Dockerfile - commands RUN, ADD, COPY, ENTRYPOINT

FROM alpine:latest
RUN apk add --no-cache fortune
ENTRYPOINT ["fortune"]

docker build -t fortune:alpine

Compose file

non-cluster         - docker-compose.yml
cluster deployment  -  docker swarm

version: "3.3"

services:
    fortune:
        image: "fortune:alpine"

docker-compose up
docker-compose -f docker-compose.yml up

docker swarm init
docker stack deploy -c docker-compose.yml fortune


---
tomcat

https://medium.com/analytics-vidhya/how-to-understand-building-images-with-docker-compose-24cbdbc0641f

version: '3'
  services:
    app:
      image: tomcat:9.0.12
      ports:
        - "8081:8080"

Dockerfile
FROM tomcat:9.0.12
COPY index.html /usr/local/tomcat/webapps/ROOT/index.html

index.html
<html>
  <body>
    <h1>docker-compose build worked!</h1>
  </body>
</html>


docker-compose build
docker-compose up
localhost:8081

docker-compose down
# make modifications
docker-compose build
docker-compose up
# test modifications

###################################################
Deploy a multi-container group using Docker Compose  Azure container
https://docs.microsoft.com/en-us/azure/container-instances/tutorial-docker-compose
###################################################

azure-vote-back

version: '3'
services:
  azure-vote-back:
    image: mcr.microsoft.com/oss/bitnami/redis:6.0.8
    container_name: azure-vote-back
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    ports:
        - "6379:6379"

  azure-vote-front:
    build: ./azure-vote
    image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
    container_name: azure-vote-front
    environment:
      REDIS: azure-vote-back
    ports:
        - "8080:80"

azure-vote-front

version: '3'
services:
  azure-vote-back:
    image: mcr.microsoft.com/oss/bitnami/redis:6.0.8
    container_name: azure-vote-back
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    ports:
        - "6379:6379"

  azure-vote-front:
    build: ./azure-vote
    image: myregistry.azurecr.io/azure-vote-front
    container_name: azure-vote-front
    environment:
      REDIS: azure-vote-back
    ports:
        - "80:80"


docker-compose up --build -d
