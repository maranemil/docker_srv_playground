
--------------------------------
sAMAccountName

https://adldap.sourceforge.net/wiki/doku.php?id=api_pagingsupport
https://packagist.org/packages/edvlerblog/yii2-adldap-module
https://github.com/Adldap2/Adldap2-Laravel/issues/680
https://rzwww.oth-regensburg.de/supportwiki/doku.php?id=public:netz:auth
https://serverfault.com/questions/1108927/ldapsearch-finds-my-account-user-sssd-does-not
https://pypi.org/project/pyadldap/0.1.6/
https://stackoverflow.com/questions/14441529/ldap-filter-for-blank-empty-attribute
https://serverfault.com/questions/790115/ldap-query-for-blank-attribute-value
https://github.com/Adldap2/Adldap2/issues/595
https://www.php.net/manual/en/function.ldap-search.php
https://github.com/Adldap2/Adldap2-Laravel/issues/657
https://stackoverflow.com/questions/72122023/adldap2-unable-to-retrieve-custom-user-attribute
https://xref.dokuwiki.org/reference/dokuwiki/lib/plugins/authad/adLDAP/adLDAP.php.source.txt
https://adldap.sourceforge.net/wiki/doku.php?id=api_user_functions


[domain/hs-regensburg.de]
id_provider = ldap
auth_provider = ldap
ldap_schema = AD

ldap_uri = ldaps://adldap.hs-regensburg.de/
ldap_search_base = dc=hs-regensburg,dc=de

ldap_default_bind_dn = CN=abc12345,OU=Studenten,OU=Benutzer,OU=EI,OU=HSR,DC=hs-regensburg,DC=de
#ldap_default_bind_dn = abc12345@hs-regensburg.de
ldap_default_authtok_type = password
ldap_default_authtok = insertPassword

cache_credentials = false


URL	ldaps://adldap.hs-regensburg.de/
Server	adldap.hs-regensburg.de
Port	636
Base DN	dc=hs-regensburg,dc=de
Bind DN	abc12345@hs-regensburg.de
Search filter	samAccountName=abc12345

ldapsearch -H 'ldaps://adldap.hs-regensburg.de' -b 'DC=hs-regensburg,DC=de' -D 'abc12345@hs-regensburg.de' -W -z 0 -LLL -E pr=1000/noprompt samAccountName=abc12345

ldapsearch \
-A
-H 'ldaps://adldap.hs-regensburg.de' \
-b 'DC=hs-regensburg,DC=de' \
-D 'abc12345@hs-regensburg.de' \
-W -z 0 -LLL -E pr=1000/noprompt sAMAccountName=abc12345

/etc/openldap/ldap.conf einzutragen:
TLS_REQCERT allow
sasl_secprops maxssf=0

ldapsearch -D cn=admin -w pass -s sub -b ou=users,dc=acme 'manager=\00' uid manager
ldapsearch -D cn=admin -w pass -s sub -b ou=users,dc=acme manager=\00 uid manager


---------------------------
https://adldap.sourceforge.net/wiki/doku.php?id=api_user_functions

# create
$attributes=array(
"username"=>"Some.User",
"logon_name"=>"some.user@mydomain.local",
"firstname"=>"Fred",
"surname"=>"Smith",
"company"=>"My Company",
"department"=>"My Department",
"email"=>"Some.Use@mydomain.local",
"container"=>array("Container Parent","Container Child"),
"enabled"=>1,
"password"=>"Password123",
);
$result=$adldap->user_create($attributes);

# search
$userinfo = $adldap->user_info('AD.UserName', array("physicaldeliveryofficename","mail","displayname"));
echo $userinfo[0]["displayname"][0];

# modify
$modified = $adldap->user_modify("AD.UserName", array("enabled"=>0));
$modified = $adldap->user_modify("AD.UserName", array("telephone"=>'00000000',"web_page"=>'http://mydomain.com'));
$setpassword = $adldap->user_password('AD.UserName', 'newpassword');

# move
$moveUser = $adldap->user_move('user.name', array("Container Parent","Container Child"));

---------------------------------------------------------------------------------
https://www.mediawiki.org/wiki/Extension_talk:LDAPAuthorization

{

     "intern.goetel.de": {
             "connection": {
                     "server": "our-dc-controller",
                     "user": "ldap-user",
                     "pass": "password",
                     "options": {
                             "LDAP_OPT_DEREF": 1
                     },
                    "basedn": "ou=container, dc=domain,dc=tld",
                    "groupbasedn": "dc=domain,dc=tld",
                    "userbasedn": "dc=domain,dc=tld",
                    "searchattribute": "samaccountname",
                    "usernameattribute": "samaccountname",
                    "realnameattribute": "cn",
                    "emailattribute": "mail",
                    "grouprequest": "MediaWiki\\Extension\\LDAPProvider\\UserGroupsRequest\\UserMemberOf::factory"
            },
            "authorization": {
                    "rules": {
                            "groups": {
                                    "required": ["CN=groupname,OU=OUname,OU=OUname,DC=goetel,DC=de"]
                            }
                    }
            }
    }
}

---------------------------------------------------------------------------------
codeigniter-adldap

https://github.com/Eragos/codeigniter-adldap/commit/c62a9729d3ebd8af7aeea36e43e933195b5d1c94
https://forum.codeigniter.com/printthread.php?tid=29515
https://git.rz.uni-jena.de/composer/laravel-adminless-ldap-auth

Add new user functions:
* Return a list of all users in AD search by samaccountname
  function all_users_samaccountname($include_desc = false, $search =
"*", $sorted = true, $filter = "")

* Set User Thumbnailphoto
  function user_set_thumbnailphoto($username,$imagestream)

* Unlock a user account
  function user_unlock($username)

Add new computer functions:
* Add a computer to a group
  function group_add_computer($group,$computer,$isGUID=false)

* Remove a computer from a group
  function group_del_computer($group,$computer,$isGUID=false)

* Return a list of all computers in AD
  function all_computers($include_desc = false, $search = "*", $sorted
= true)

* Obtain the computers's distinguished name based on their computerid
  function computer_dn($computername,$isGUID=false)

---------------------------------------------------------------------------------
https://forum.coppermine-gallery.net/index.php?topic=74451.0

$g_login_method = LDAP;
$g_ldap_server	= 'dc01.mydomain.net';
$g_ldap_port = 389; # Default is 389
$g_ldap_root_dn = "OU=Users,OU=Region,OU=AP,DC=dc01,DC=mydomain,DC=net";
$g_ldap_bind_dn = 'dc01\john';
$g_ldap_bind_passwd = 'welcome';
$g_use_ldap_email = ON;
$g_use_ldap_realname = ON;
$g_ldap_protocol_version = 3;
$g_ldap_uid_field= 'sAMAccountName'; # Use ‘sAMAccountName’ for Active Directory - this is the name of the attribute used to search a user
$g_ldap_realname_field  = 'cn';
$g_ldap_follow_referrals = OFF;


ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, $LDAPCONF['protocol']);
ldap_set_option($conn LDAP_OPT_REFERRALS, 0);


---------------------------------------------------------------------------------

http://www.darksideofthecarton.com/code/php-adldap/


// Different type of accounts in AD
define ('ADLDAP_NORMAL_ACCOUNT', 805306368);
define ('ADLDAP_WORKSTATION_TRUST', 805306369);
define ('ADLDAP_INTERDOMAIN_TRUST', 805306370);
define ('ADLDAP_SECURITY_GLOBAL_GROUP', 268435456);
define ('ADLDAP_DISTRIBUTION_GROUP', 268435457);
define ('ADLDAP_SECURITY_LOCAL_GROUP', 536870912);
define ('ADLDAP_DISTRIBUTION_LOCAL_GROUP', 536870913);

class adLDAP {
// BEFORE YOU ASK A QUESTION, PLEASE READ THE FAQ
// http://adldap.sourceforge.net/faq.php

// These vars will be set in your inital call to create a new adLDAP
var $_account_suffix;
var $_base_dn;
var $_domain_controllers; // An array of domain controllers. Specify multiple controllers if you would like the class to balance the LDAP queries amongst multiple servers
// Examples:
// $_account_suffix="@yourdomain.local";
// $_base_dn = "DC=yourdomain,DC=local";
// $_domain_controllers = array ("dc.mydomain.local", "dc2.mydomain.local");

// optional account for searching
var $_ad_username=NULL;
var $_ad_password=NULL;

// AD does not return the primary group. http://support.microsoft.com/?kbid=321360
// This tweak will resolve the real primary group, but may be resource intensive.
// Setting to false will fudge "Domain Users" and is much faster.
var $_real_primarygroup=true;

//other variables
var $_user_dn;
var $_user_pass;
var $_conn;
var $_bind;

// default constructor
function adLDAP($_account_suffix, $_base_dn, $_domain_controllers){
// Set Config Vars
$this->_account_suffix = $_account_suffix;
$this->_base_dn = $_base_dn;
$this->_domain_controllers = $_domain_controllers;
//connect to the LDAP server as the username/password
$this->_conn = ldap_connect($this->random_controller());
ldap_set_option($this->_conn, LDAP_OPT_PROTOCOL_VERSION, 3);
ldap_set_option($this->_conn, LDAP_OPT_REFERRALS, 0); //disable plain text passwords
ldap_set_option($this->_conn, LDAP_OPT_DEBUG_LEVEL, 7);
return true;
}

// default destructor
function __destruct(){ ldap_close ($this->_conn); }

function random_controller(){
//select a random domain controller
mt_srand(doubleval(microtime()) * 100000000);
return ($this->_domain_controllers[array_rand($this->_domain_controllers)]);
}

// authenticate($username,$password)
//    Authenticate to the directory with a specific username and password
//    Extremely useful for validating login credentials
function authenticate($username,$password){
//validate a users login credentials
$returnval=false;

if ($username!=NULL &amp;&amp; $password!=NULL){ //prevent null bind
$this->_user_dn=$username.$this->_account_suffix;
$this->_user_pass=$password;

$this->_bind = @ldap_bind($this->_conn,$this->_user_dn,$this->_user_pass);
if ($this->_bind){ $returnval=true; }
else {$returnval=false;}
}
return ($returnval);
}

// rebind()
//    Binds to the directory with the default search username and password
//    specified above.
function rebind(){
//connect with another account to search with if necessary
$ad_dn=$this->_ad_username.$this->_account_suffix;
$this->_bind = @ldap_bind($this->_conn,$ad_dn,$this->_ad_password);
if ($this->_bind){ return (true); }
return (false);
}

// user_info($user,$fields)
//    Returns an array of information for a specific user
function user_info($user,$fields=NULL){
if ($user!=NULL){
if ($this->_ad_username!=NULL){ $this->rebind(); } //bind as a another account if necessary

if ($this->_bind){ //perform the search and grab all their details
$filter="samaccountname=".$user;
if ($fields==NULL){ $fields=array("samaccountname","mail","memberof","department","displayname","telephonenumber","primarygroupid"); }
$sr=ldap_search($this->_conn,$this->_base_dn,$filter,$fields);
$entries = ldap_get_entries($this->_conn, $sr);

// AD does not return the primary group in the ldap query, we may need to fudge it
if ($this->_real_primarygroup){
$entries[0]["memberof"][]=$this->group_cn($entries[0]["primarygroupid"][0]);
} else {
$entries[0]["memberof"][]="CN=Domain Users,CN=Users,".$this->_base_dn;
}
$entries[0]["memberof"]["count"]++;

return ($entries);
}
}

return (false);
}

// user_groups($user)
//    Returns an array of groups that a user is a member off
function user_groups($user){
if ($this->_ad_username!=NULL){ $this->rebind(); } //bind as a another account if necessary

if ($this->_bind){
//search the directory for their information
$info=@$this->user_info($user,array("memberof","primarygroupid"));
$groups=$info[0]["memberof"]; //presuming the entry returned is our guy (unique usernames)

$group_array=array();

for ($i=0; $i< $groups["count"]; $i++){ //for each group
$line=$groups[$i];

$group_name="";
$line_length=strlen($line);
//more presumptions, they're all prefixed with CN=
//so we ditch the first three characters and the group
//name goes up to the first comma
for ($j=3; $j<$line_length; $j++){
if ($line[$j]==","){
$j=$line_length;
} else {
$group_name.=$line[$j];
}
}
$group_array[$i] = $group_name;
}
return ($group_array);
}
return (false);
}

// group_members($group)
//    Returns an array of users that a group has
function group_members($group){
if ($this->_ad_username!=NULL){ $this->rebind(); } //bind as a another account if necessary
if ($this->_bind){
//search the directory for their information
$info=@$this->group_info($group,array("member","cn"));
$users=$info[0]["member"]; //presuming the entry returned is our guy (unique usernames)

$user_array=array();

for ($i=0; $i< $users["count"]; $i++){ //for each group
$line=$users[$i];

$user_name="";
$line_length=strlen($line);
//more presumptions, they're all prefixed with CN=
//so we ditch the first three characters and the group
//name goes up to the first comma
for ($j=3; $j<$line_length; $j++){
if ($line[$j]==","){
$j=$line_length;
} else {
$user_name.=$line[$j];
}
}
$user_array[$i] = $user_name;
}
return ($user_array);
}
return (false);
}

// user_ingroup($user,$group)
//    Returns true if the user is a member of the group
function user_ingroup($user,$group){
if (($user!=NULL) &amp;&amp; ($group!=NULL)){
if ($this->_ad_username!=NULL){ $this->rebind(); } //bind as a another account if necessary
if ($this->_bind){
$groups=$this->user_groups($user);
if (in_array($group,$groups)){ return (true); }
}
}
return (false);
}

// group_hasuser($user,$group)
//    Returns true if the user is a member of the group
function group_hasuser($user,$group){
if (($user!=NULL) &amp;&amp; ($group!=NULL)){
if ($this->_ad_username!=NULL){ $this->rebind(); } //bind as a another account if necessary
if ($this->_bind){
$user_info=$this->user_info($user,array("dn"));
$user_array=explode(",",$user_info[0]["dn"]); // Explode User DN
$user_name=explode("=",$user_array[0]);
$group_members=$this->group_members($group);
if (in_array($user_name[1],$group_members)){ return (true); }
}
}
return (false);
}

function group_cn($gid){
if ($this->_ad_username!=NULL){ $this->rebind(); } //bind as a another account if necessary

// coping with AD not returning the primary group
// http://support.microsoft.com/?kbid=321360
// for some reason it's not possible to search on primarygrouptoken=XXX
// if someone can show otherwise, I'd like to know about it :)
// this way is resource intensive and generally a pain in the @#%^

$r=false;

if ($this->_bind){
$filter="(&amp;(objectCategory=group)(samaccounttype=". ADLDAP_SECURITY_GLOBAL_GROUP ."))";
$fields=array("primarygrouptoken","samaccountname","distinguishedname");
$sr=ldap_search($this->_conn,$this->_base_dn,$filter,$fields);
$entries = ldap_get_entries($this->_conn, $sr);

for ($i=0; $i< $entries["count"]; $i++){
if ($entries[$i]["primarygrouptoken"][0]==$gid){
$r=$entries[$i]["distinguishedname"][0];
$i=$entries["count"];
}
}
}
return ($r);
}

// group_info($group_name,$fields=NULL)
// Returns an array of information for a specified group
function group_info($group_name,$fields=NULL){
if ($this->_ad_username!=NULL){ $this->rebind(); } //bind as a another account if necessary

if ($this->_bind){
$filter="(&amp;(objectCategory=group)(name=".$group_name."))";
if ($fields==NULL){ $fields=array("member","cn","description","distinguishedname","objectcategory","samaccountname"); }
$sr=ldap_search($this->_conn,$this->_base_dn,$filter,$fields);
$entries = ldap_get_entries($this->_conn, $sr);
return ($entries);
}
return (false);
}

function all_users($include_desc = false, $search = "*", $sorted = true){
// Returns all AD users
if ($this->_ad_username!=NULL){ $this->rebind(); } //bind as a another account if necessary

if ($this->_bind){
$users_array = array();

//perform the search and grab all their details
$filter = "(&amp;(objectClass=user)(samaccounttype=". ADLDAP_NORMAL_ACCOUNT .")(objectCategory=person)(cn=$search))";
$fields=array("samaccountname","displayname");
$sr=ldap_search($this->_conn,$this->_base_dn,$filter,$fields);
$entries = ldap_get_entries($this->_conn, $sr);

for ($i=0; $i< $entries["count"]; $i++){
if( $include_desc &amp;&amp; strlen($entries[$i]["displayname"][0]) > 0 )
$users_array[ $entries[$i]["samaccountname"][0] ] = $entries[$i]["displayname"][0];
else if( $include_desc )
$users_array[ $entries[$i]["samaccountname"][0] ] = $entries[$i]["samaccountname"][0];
else
array_push($users_array, $entries[$i]["samaccountname"][0]);
}
if( $sorted ){ asort($users_array); }
return ($users_array);
}
return (false);
}

function all_groups($include_desc = false, $search = "*", $sorted = true){
// Returns all AD groups
if ($this->_ad_username!=NULL){ $this->rebind(); } //bind as a another account if necessary

if ($this->_bind){
$groups_array = array();

//perform the search and grab all their details
$filter = "(&amp;(objectCategory=group)(samaccounttype=". ADLDAP_SECURITY_GLOBAL_GROUP .")(cn=$search))";
$fields=array("samaccountname","description");
$sr=ldap_search($this->_conn,$this->_base_dn,$filter,$fields);
$entries = ldap_get_entries($this->_conn, $sr);

for ($i=0; $i< $entries["count"]; $i++){
if( $include_desc &amp;&amp; strlen($entries[$i]["description"][0]) > 0 )
$groups_array[ $entries[$i]["samaccountname"][0] ] = $entries[$i]["description"][0];
else if( $include_desc )
$groups_array[ $entries[$i]["samaccountname"][0] ] = $entries[$i]["samaccountname"][0];
else
array_push($groups_array, $entries[$i]["samaccountname"][0]);
}
if( $sorted ){ asort($groups_array); }
return ($groups_array);
}
return (false);
}
} // End class

---------------------------------------------------------------------------------
https://www.mediawiki.org/wiki/Topic:Pxtrfeuegy0hmzeb



 $wgLDAPRequiredGroups = array( "testADLDAPdomain"=>array("cn=testgroup,ou=groups,dc=adldap,dc=example,dc=com"));
 $wgLDAPGroupUseFullDN = array( "testADLDAPdomain"=>true );
 $wgLDAPGroupObjectclass = array( "testADLDAPdomain"=>"group" );
 $wgLDAPGroupAttribute = array( "testADLDAPdomain"=>"member" );
 $wgLDAPGroupSearchNestedGroups = array( "testADLDAPdomain"=>true );
 $wgLDAPGroupNameAttribute = array( "testADLDAPdomain"=>"cn" );
 $wgLDAPBaseDNs = array( "testADLDAPdomain"=>"dc=ADLDAP,dc=example,dc=com" );
 $wgLDAPSearchAttributes = array( "testADLDAPdomain"=>"sAMAccountName" );


require_once ('extensions/LdapAuthentication.php');
 $wgAuth = new LdapAuthenticationPlugin();

 $wgLDAPDomainNames = array(
 'exampleADDomain'
 );

 $wgLDAPServerNames = array(
 'exampleADDomain' => 'exampleldapserver.example.com exampleldapserver2.example.com'
 );

 $wgLDAPSearchStrings = array(
 'exampleADDomain' => 'EXAMPLEDOMAIN\\USER-NAME'
 );

 $wgLDAPEncryptionType = array(
 'exampleADDomain' => 'ssl'
 );

 $wgLDAPUseLocal = false;
 $wgMinimalPasswordLength = 1;

 $wgLDAPBaseDNs = array(
 'exampleADDomain' => 'cn=Users,dc=example,dc=com'
 );

 $wgLDAPSearchAttributes = array(
 'exampleADDomain' => 'sAMAccountName' );


---------------------------------------------------------------------------------

https://pleasantpasswords.com/info/pleasant-password-server/x-common-issues/adldap-migration-error



SELECT "Name"
FROM "UserDirectory"
WHERE "ConnectionType" <> 'ActiveDirectory'
AND "Schema" LIKE '%"UserName":"samaccountname"%';



SELECT 'Role' as "UserOrRole", "Name" as "Name"
FROM "Role"
WHERE "DirectoryId" IS NOT NULL
AND (
  "UniqueDirectoryId" IS NULL
  OR "UniqueDirectoryId" LIKE '%=%'
  OR LTRIM(RTRIM("UniqueDirectoryId")) = ''
)
UNION ALL
SELECT 'User' as "UserOrRole", "UserName" as "Name"
FROM "User"
WHERE "DirectoryId" IS NOT NULL
AND (
  "UniqueDirectoryId" IS NULL
  OR "UniqueDirectoryId" LIKE '%=%'
  OR LTRIM(RTRIM("UniqueDirectoryId")) = ''
)
ORDER BY "UserOrRole";

---------------------------------------------------------------------------------
adLDAP
https://www.ullright.org/ullWiki/show/adldap


ldapsearch -x -LLL -h ad01.example.net -D user -b 'DC=example,DC=net' -w abc123 wikitestuser@demodomain.at

Exports from Active Directory into CSV
csvde -u -d "OU=Test,DC=example,DC=com" -r "(objectClass=user)" -l "DN, objectClass, name, sAMAccountName, givenName, sn, mail, mobile, member, memberOf" -f c:\ad.csv

-u = Unicode (Umlauts etc)
-d = LDAP Subtree
-r = Limit eg. only users
-l = Export only certain fields
-f = Output filename
---------------------------------------------------------------------------------

https://forums.cacti.net/viewtopic.php?t=23948&start=15


Server = <my server>
Port Standard = 389
Port SSL = 636
Protocol Version = 3
Encryption = None
Referals = Enabled
Mode = Specific Searching
Distinguished Name = <username>domain.local
Search Base = dc=domain,dc=local
Search Filter = (&(objectclass=user)(objectcategory=user)(userPrincipalName=<username>*))
Search Distinguished Name = cn=ldap,cn=users,dc=domain,dc=local
Search Password = <my LDAP user's password


 ldapsearch -p 389 -h host.name.com -W -D cn=ldap,cn=users,dc=domain,dc=local \
 -b dc=domain,dc=local sAMAccountName=user


Configuration -> Settings -> Authentication

Select LDAP Authentication
Guest User - No User
User Template - guest
Server - FQDN
Port Standard 369
Port SSL 636
Protocol Version 3
Encryption None
Referrals Disabled
Mode Specific Searching
Distinguished Name Blank Field
Require Group Membership Check
Group Distinguished Name CN=Cacti_Users,OU=groups,dc=company,dc=com
Group Member Attribute member
Group Member Type Distinguished Name
Search Base ou=users,dc=company,dc=com
Search Filter (&(objectclass=user)(objectcategory=user)(userPrincipalName=<username>*))
Search Distinguished Name ldap_user@company.com
Search Password ldap_user's password


Guest User : guest
User Template : guest
Server : xxx.xxx.xxx.xxx
Port standard : 389
Port SSL : 636
Protocol Version : 3
Encryption : None
Referals : Disabled
Mode : Specific Searching
Distinguished Name :
Require Group Membership : Checked
Group Distinguished Name : CN=CactiUsers,OU=Systems,DC=mydomain,DC=co,DC=uk
Group Member Attribute : member
Group Member Type : Distingished Name
Search Base : DC=mydomain,DC=co,DC=uk
Search Filter : (&(objectclass=user)(objectcategory=user)(userPrincipalName=<username>*))
Search Distingished Name (DN) : admin@mydomain.co.uk
Search Password : password


Guest User = No user
user Template = No User
server = SERVERIP
Port = 389
port/ssl = 636
Protocol version = 3
Encrytion = None
Referrals = Disabled
Mode = No searching
DN = uid=<username>,dc=domain,dc=net


Guest User : template_guest
User Template : template_user
Server : 192.168.xxx.xxx
Port standard : 389
Port SSL : 636
Protocol Version : 3
Encryption : None
Referals : Disabled
Mode : Specific Searching
Distinguished Name (DN): <username>@xx.mydomain.com
Require Group Membership : Checked

---------------------------------------------------------------------------

https://www.openldap.org/doc/admin24/backends.html#SQL
https://docs.oracle.com/javase/jndi/tutorial/ldap/security/ldap.html
https://docs.oracle.com/javase/jndi/tutorial/ldap/TOC.html



#########################################################
LdapRecord docs
#########################################################

https://ldaprecord.com/docs/core/v1/active-directory/groups/#creation
https://ldaprecord.com/docs/core/v1/active-directory/users/#
https://ldaprecord.com/docs/core/v1/active-directory/users/#password-policy-errors
https://ldaprecord.com/docs/core/v1/active-directory/users/#setting-passwords
https://ldaprecord.com/docs/core/v1/authentication/#basic-authentication
https://ldaprecord.com/docs/core/v1/configuration/#hosts
https://ldaprecord.com/docs/core/v2/active-directory/groups/
https://ldaprecord.com/docs/core/v2/active-directory/groups/#creation
https://ldaprecord.com/docs/core/v2/active-directory/groups/#getting-members
https://ldaprecord.com/docs/core/v2/active-directory/users/#creation
https://ldaprecord.com/docs/core/v2/active-directory/users/#creation
https://ldaprecord.com/docs/core/v2/active-directory/users/#creation
https://ldaprecord.com/docs/core/v2/active-directory/users/#creation
https://ldaprecord.com/docs/core/v2/active-directory/users/#creation
https://ldaprecord.com/docs/core/v2/active-directory/users/#group-management
https://ldaprecord.com/docs/core/v2/active-directory/users/#password-policy-errors
https://ldaprecord.com/docs/core/v2/active-directory/users/#unlock-locked-out-user-account
https://ldaprecord.com/docs/core/v2/active-directory/users/#usage
https://ldaprecord.com/docs/core/v2/active-directory/users/#usage
https://ldaprecord.com/docs/core/v2/active-directory/users/#user-account-expiry
https://ldaprecord.com/docs/core/v2/active-directory/users/#user-account-expiry
https://ldaprecord.com/docs/core/v2/common-queries/#
https://ldaprecord.com/docs/core/v2/configuration#hosts
https://ldaprecord.com/docs/core/v2/configuration/#hosts
https://ldaprecord.com/docs/core/v2/connections/#connecting-anonymously
https://ldaprecord.com/docs/core/v2/connections/#getting-connections
https://ldaprecord.com/docs/core/v2/connections/#setting-default-connection
https://ldaprecord.com/docs/core/v2/logging/
https://ldaprecord.com/docs/core/v2/logging/#registering--enabling-a-logger
https://ldaprecord.com/docs/core/v2/model-mutators/#date-mutators
https://ldaprecord.com/docs/core/v2/model-mutators/#defining-an-accessor
https://ldaprecord.com/docs/core/v2/model-mutators/#defining-an-accessor
https://ldaprecord.com/docs/core/v2/model-relationships/
https://ldaprecord.com/docs/core/v2/model-scopes#introduction
https://ldaprecord.com/docs/core/v2/models/#active-directory-models
https://ldaprecord.com/docs/core/v2/models/#active-directory-models
https://ldaprecord.com/docs/core/v2/models/#introduction
https://ldaprecord.com/docs/core/v2/quickstart/
https://ldaprecord.com/docs/core/v2/quickstart/
https://ldaprecord.com/docs/core/v2/searching-api/
https://ldaprecord.com/docs/core/v2/searching/#chunking
https://ldaprecord.com/docs/core/v2/searching/#creating-a-new-query
https://ldaprecord.com/docs/core/v2/searching/#introduction
https://ldaprecord.com/docs/core/v2/searching/#notfilter
https://ldaprecord.com/docs/core/v2/searching/#orfilter
https://ldaprecord.com/docs/laravel/v1/auth/configuration/#all-available-options-example
https://ldaprecord.com/docs/laravel/v1/auth/multi-domain/#email-address-suffix
https://ldaprecord.com/docs/laravel/v1/auth/multi-domain/#step-2---login-controller-setup
https://ldaprecord.com/docs/laravel/v1/quickstart/#introduction
https://ldaprecord.com/docs/laravel/v1/usage/#models
https://ldaprecord.com/docs/laravel/v2/auth/plain/configuration/#creating-rules
https://ldaprecord.com/docs/laravel/v2/configuration/#using-an-environment-file-env
https://ldaprecord.com/docs/laravel/v2/debugging/#logging-in

https://github.com/Adldap2/Adldap2/blob/master/tests/Models/UserTest.php#L183-L194
https://github.com/Adldap2/Adldap2/issues/497
https://github.com/nilsteampassnet/TeamPass/issues/3167

https://github.com/DirectoryTree/LdapRecord
https://github.com/DirectoryTree/LdapRecord-Docs/blob/master/laravel/v2/auth/multi-domain.md
https://github.com/DirectoryTree/LdapRecord/commit/28f7d85878e3bbbcbc2761a9d3a74df63b19a2c0
https://github.com/DirectoryTree/LdapRecord/commit/29e650e5636854ae252a646e46ebc9f00c89944d
https://github.com/DirectoryTree/LdapRecord/commit/6718c483f8503ca41b6f9aa45941c468aff98c1f
https://github.com/DirectoryTree/LdapRecord/commit/b8eb7a43006908eb607cd052b8753c31a1aa50d1
https://github.com/DirectoryTree/LdapRecord/commit/c64705b393a0d42890ea0822d70936e843dcec1f
https://github.com/DirectoryTree/LdapRecord/issues/131

------------------------------------------------------------------------------------

$suffix = $this->configuration->getAccountSuffix();
$this->bindUsingCredentials($username, $password, $suffix);

src/Configuration/DomainConfiguration.php
account_suffix

src/Auth/Guard.php
src/Auth/GuardInterface.php
bind($username, $password, $prefix = null, $suffix = null)

src/Adldap.php
protected $accountSuffix = '@mydomain.local';

#########################################################
Active Directory authentication differences with Adldap2
#########################################################

https://github.com/DirectoryTree/LdapRecord/issues/131
https://ldaprecord.com/docs/connections/#binding
https://github.com/DirectoryTree/LdapRecord-Laravel/issues/194


$user = 'cn=user,dc=local,dc=com';
$password = 'secret';
if ($connection->auth()->attempt($user, $password, $bindAsUser = true))
{
    echo "Username and password are correct!";
    // Run further LDAP operations under this user.
}


Also, the account_suffix and account_prefix options have been removed since you can simply append or prepend these onto usernames yourself:

$suffx = '@local.com';
$user = 'jdoe';
$password = 'secret';
if ($connection->auth()->attempt($user.$suffix, $password, $bindAsUser = true))
{
    //
}

#########################################################
conn options  LdapRecord
#########################################################

// An array of LDAP hosts.
'hosts' => [],

// The global LDAP operation timeout limit in seconds.
'timeout' => 5,

// The LDAP version to utilize.
'version' => 3,

// The port to use for connecting to your hosts.
'port' => LdapInterface::PORT,

// The base distinguished name of your domain.
'base_dn' => '',

// The username to use for binding.
'username' => '',

// The password to use for binding.
'password' => '',

// Whether or not to use SSL when connecting.
'use_ssl' => false,

// Whether or not to use TLS when connecting.
'use_tls' => false,

// Whether or not follow referrals is enabled when performing LDAP operations.
'follow_referrals' => false,

// Custom LDAP options.
'options' => [],

#########################################################
LDAP bind user requirements
#########################################################

https://www.ibm.com/docs/en/spectrum-scale/4.2.0?topic=prerequisites-ldap-bind-user-requirements
https://docs.oracle.com/cd/E26362_01/E26354/html/ldap-auth.html
https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ldap/binding-to-an-ldap-server

uid=ibmbinduser,ou=people,dc=ldapserver,dc=com

A common name, for example Indigo Jones
A user name, for example indigo
An email address, for example indigo@example.com

attributes:
cn
uid
mail

#########################################################
setLogger LdapRecord
#########################################################
https://ldaprecord.com/docs/laravel/v1/auth/importing/
https://ldaprecord.com/docs/laravel/v1/debugging/
https://ldaprecord.com/docs/core/v2/logging/

\LdapRecord\Container::setLogger($myLogger);