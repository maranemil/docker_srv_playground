# https://www.youtube.com/watch?v=w2_Dx8pd43w
# https://docs.docker.com/config/containers/container-networking/
# https://docs.docker.com/config/containers/container-networking/
# https://docs.docker.com/network/iptables/
# https://docs.docker.com/network/none/
# https://danielmiessler.com/study/manually-set-ip-linux/

# docker exec -it keyloack_wordpress_1 bash
# hostname -d
# hostname -f

# apt install net-tools
# netstat -tulpen
# netstat -tulpn | grep LISTEN

# apt install nmap
# nmap -sTU 127.0.0.1
# nmap -sTU localhost

# docker network ls
# docker ps
# ip addr show

# curl -I http://localhost:9008
# curl -I http://localhost:9011
# cURL error 7: Failed to connect to localhost port 9011: Connection refused

# docker exec -it keycloak_container bash
# docker exec -it -u 0 keycloak_container bash  # as root
# curl -v http://localhost:9011  > Connection refused
# curl -Ivk http://localhost:9011  > Connection refused
# curl -I http://localhost:80 > OK

# using 8080:80 everywhere > WARNING: Host is already in use by another container
# lsof -i -P -n | grep LISTEN
# lsof -i -P -n | grep :80
# docker ps -a
# lsof -i tcp:8080
# lsof -i tcp:80

# clear containers volumes images networks
# docker rm -f $(docker ps -aq)
# docker volume rm $(docker volume ls -q)
# docker rmi -f $(docker images -a -q)
# docker network rm $(docker network ls | tail -n+2 | awk '{if($2 !~ /bridge|none|host/){ print $1 }}')

# docker network ls
# docker network inspect keyloack_keycloaknetwork
# docker network inspect keyloack_wordpressnetwork

# docker info
# netstat -a | grep LISTEN

# docker ps
# docker inspect wordpress_container | grep IPAddress
# "IPAddress": "172.27.0.3",
# docker inspect keycloak_container | grep IPAddress
# "IPAddress": "172.27.0.4"

# http://172.20.0.2/wp-admin/install.php
# http://172.20.0.4:8080/auth/

version: "3"
services:

  postgresql:
    image: "docker.io/bitnami/postgresql:11"
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_USERNAME=bn_keycloak
      - POSTGRESQL_DATABASE=bitnami_keycloak
    volumes:
      - "postgresql_data:/bitnami/postgresql"
    networks:
      static-network:
        ipv4_address: 172.20.0.5

  keycloak:
    container_name: keycloak_container
    restart: always
    image: docker.io/bitnami/keycloak:latest
    ports:
      - "9011:8080"
    environment:
      - KEYCLOAK_CREATE_ADMIN_USER=true
      #- KEYCLOAK_ADMIN_USER=user
      #- KEYCLOAK_ADMIN_PASSWORD=bitnami
      #- KEYCLOAK_MANAGEMENT_USER=manager
      #- KEYCLOAK_MANAGEMENT_PASSWORD=bitnami1
    depends_on:
      - postgresql
    networks:
      static-network:
        ipv4_address: 172.20.0.4

  db:
    image: mysql:5.7
    links:
      - wordpress
    restart: always
    environment:
      MYSQL_DATABASE: exampledb
      MYSQL_USER: exampleuser
      MYSQL_PASSWORD: examplepass
      MYSQL_RANDOM_ROOT_PASSWORD: '1'
    volumes:
      - db:/var/lib/mysql
    networks:
      static-network:
        ipv4_address: 172.20.0.3

  wordpress:
    container_name: wordpress_container
    hostname: wordpress
    image: wordpress
    restart: always
    ports:
      - "8082:80"
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: exampleuser
      WORDPRESS_DB_PASSWORD: examplepass
      WORDPRESS_DB_NAME: exampledb
    networks:
      static-network:
        ipv4_address: 172.20.0.2


volumes:
  db:
    driver: local
  postgresql_data:
    driver: local

# docker network ls
# docker container ls
# docker network inspect bridge

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
          ip_range: 172.25.0.0/24
          gateway: 172.25.0.1

  static-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
         # ip_range: 172.20.0.0/24
#  static-network:
#    driver: bridge
#    ipam:
#      config:
#        - subnet: 172.20.0.0/16
#          ip_range: 172.20.0.1/24

# mkdir backup
#  docker ps -a
# sudo docker save --output ./backup/srv_keycloak_wp_db_1.tar  mysql:5.7
# sudo docker save --output ./backup/keycloak_container.tar bitnami/keycloak:latest
# sudo docker save --output ./backup/wordpress_container.tar wordpress
# sudo docker save --output ./backup/srv_keycloak_wp_postgresql_1.tar bitnami/postgresql:11

# docker container ls -a
# docker export --output="./backup/wordpress_container_export.tar" 08364b939d29

# docker commit 08364b939d29  wordpress/testimage:version1
# docker images

#  docker load < ./backup/wordpress_container.tar
#  docker images
#  docker load --input ./backup/wordpress_container.tar
#  docker load --input ./backup/srv_keycloak_wp_db_1.tar

# docker commit 60752228d2f7  testmysql/testimage:version1
# docker commit af722629faca  testwordpress/testimage:version1

# docker image remove testmysql/testimage:version1
# docker image remove testwordpress/testimage:version1

# sudo docker ps -a

# sudo docker commit ccdbc199fb3c testmysql/testimage:version2
# sudo docker commit 47e537e8632b testwordpress/testimage:version2

# sudo docker commit ccdbc199fb3c testmysql/testimage:version3
# sudo docker commit 47e537e8632b testwordpress/testimage:version3

# sudo docker images | grep testimage