


---------------------------------------------------------------------


https://www.keycloak.org/docs/latest/authorization_services/
https://quarkus.io/guides/security-keycloak-authorization
https://www.keycloak.org/docs/latest/securing_apps/index.html#_javascript_adapter
https://www.keycloak.org/docs/latest/securing_apps/index.html#other-openid-connect-libraries
https://www.keycloak.org/docs/latest/securing_apps/index.html#_nodejs_adapter
https://www.keycloak.org/docs-api/11.0/rest-api/index.html#_users_resource
https://github.com/keycloak/keycloak-documentation/blob/main/server_admin/topics/threat/admin.adoc
https://keycloak.discourse.group/search?q=admin%20missing


---------------------------------------------------------------------

https://gist.github.com/thomasdarimont/b8da51849d1e4f3deb1e34a27fb67eb9


docker run \
-it \
--rm
--name kcx
-e KEYCLOAK_ADMIN=admin
-e KEYCLOAK_ADMIN_PASSWORD=admin
-e KC_HTTP_RELATIVE_PATH=auth
-p 8080:8080
quay.io/keycloak/keycloak:18.0.0
start-dev


https://github.com/openremote/keycloak/blob/main/Dockerfile

# ------------------------------------------------------------------------------------
# Keycloak image built for postgresql support with theme handling customisation
# to always fallback to standard openremote theme.
# ------------------------------------------------------------------------------------
ARG VERSION=18.0.2
FROM quay.io/keycloak/keycloak:${VERSION} as builder
MAINTAINER support@openremote.io

# Add git commit label must be specified at build time using --build-arg GIT_COMMIT=dadadadadad
ARG GIT_COMMIT=unknown
LABEL git-commit=$GIT_COMMIT

# Configure build options
ENV KC_HEALTH_ENABLED=true
ENV KC_METRICS_ENABLED=true
ENV KC_FEATURES=token-exchange
ENV KC_DB=postgres
ENV KC_HTTP_RELATIVE_PATH=/auth

# Install openremote theme
ADD build/image/openremote-theme.jar /opt/keycloak/providers

# Install keycloak metrics provider
RUN curl -sL https://github.com/aerogear/keycloak-metrics-spi/releases/download/2.5.3/keycloak-metrics-spi-2.5.3.jar -o /opt/keycloak/providers/keycloak-metrics-spi-2.5.3.jar

# Build custom image and copy into this new image
RUN /opt/keycloak/bin/kc.sh build
FROM quay.io/keycloak/keycloak:${VERSION}
COPY --from=builder /opt/keycloak/ /opt/keycloak/

# Create standard deployment path and symlink themes (cannot --spi-theme-dir=/deployment/keycloak/themes)
USER 0
RUN rm -r /opt/keycloak/themes
RUN mkdir -p /deployment/keycloak/themes
RUN ln -s /deployment/keycloak/themes /opt/keycloak
USER 1000

WORKDIR /opt/keycloak

# Configure runtime options
ENV TZ=Europe/Amsterdam
ENV KC_DB_URL_HOST=postgresql
ENV KC_DB_URL_PORT=5432
ENV KC_DB_URL_DATABASE=openremote
ENV KC_DB_SCHEMA=public
ENV KC_DB_USERNAME=postgres
ENV KC_DB_PASSWORD=postgres
ENV KC_HOSTNAME=localhost
ENV KC_PROXY=edge
ENV KEYCLOAK_ADMIN=admin
ENV KEYCLOAK_ADMIN_PASSWORD=secret
ENV KC_LOG_LEVEL=info
ENV KEYCLOAK_DEFAULT_THEME=openremote
ENV KEYCLOAK_ACCOUNT_THEME=openremote
ENV KEYCLOAK_WELCOME_THEME=keycloak
ENV KEYCLOAK_START_COMMAND=start

HEALTHCHECK --interval=3s --timeout=3s --start-period=30s --retries=120 CMD curl --fail --silent http://localhost:8080/auth || exit 1

EXPOSE 8080

ENTRYPOINT /opt/keycloak/bin/kc.sh ${KEYCLOAK_START_COMMAND:-start} --spi-theme-default=${KEYCLOAK_DEFAULT_THEME:-openremote} --spi-theme-account-theme=${KEYCLOAK_ACCOUNT_THEME:-openremote} --spi-theme-welcome-theme=${KEYCLOAK_WELCOME_THEME:-keycloak} ${KEYCLOAK_START_OPTS:-}



...

docker run --rm -p 8081:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=secret -e KEYCLOAK_DEFAULT_THEME=dev -e KC_HOSTNAME_PORT=8081 -e KEYCLOAK_START_COMMAND=start-dev -e KEYCLOAK_START_OPTS="--spi-theme-static-max-age=-1 --spi-theme-cache-themes=false --spi-theme-cache-templates=false" --mount type=bind,src=$PWD/src/main/resources/theme/openremote,dst=/deployment/keycloak/themes/dev openremote/keycloak:latest
docker cp ID:/opt/keycloak/lib/lib/main/org.keycloak.keycloak-themes-${VERSION}.jar ./


---------------------------------------------------------------------

https://stackoverflow.com/questions/74784987/keycloak-urls-setup
https://keycloak.discourse.group/t/keycloak-17-run-in-docker-behind-nginx-reverse-proxy/13862

Dockerfile

FROM quay.io/keycloak/keycloak:17.0.0 as builder
ENV KC_METRICS_ENABLED=true
ENV KC_DB=postgres
ENV KC_HTTP_RELATIVE_PATH=/auth
RUN /opt/keycloak/bin/kc.sh build

FROM quay.io/keycloak/keycloak:17.0.0
COPY --from=builder /opt/keycloak/lib/quarkus/ /opt/keycloak/lib/quarkus/
WORKDIR /opt/keycloak
ENV KC_LOG_LEVEL=INFO
ENV KC_PROXY=edge
ENV KC_HTTP_ENABLED=true
ENV KC_HOSTNAME_STRICT=false

COPY ./theme/snc-lara/ /opt/keycloak/themes/snc-lara/

ENTRYPOINT ["/opt/keycloak/bin/kc.sh", "start"]

.....

keycloak:
    image: 'my-repo.at/lara-keycloak:latest'
    environment:
      KC_DB_URL: 'jdbc:postgresql://db-url.at:5533/keycloak'
      KC_DB_SCHEMA: public
      KC_DB_USERNAME: lara
      KC_DB_PASSWORD: 'securepw'
      KEYCLOAK_ADMIN: kcadmin
      KEYCLOAK_ADMIN_PASSWORD: 'securepw'
      KC_HOSTNAME: 'ext-hostname.at'
    ports:
      - '8686:8080/tcp'

---------------------------------------------------------------------

https://m4rc3l.de/blog/keycloak-quarkus-migration

# Dockerfile
ARG KEYCLOAK_VERSION
FROM quay.io/keycloak/keycloak:${KEYCLOAK_VERSION}
ENV KC_DB=postgres
RUN /opt/keycloak/bin/kc.sh build


# shell
docker build \
  -t local/keycloak:17.0.0 \
  --build-arg=KEYCLOAK_VERSION=17.0.0 \
  .




# docker-compose.yaml
version: '3.9'
services:
  keycloak:
    image: local/keycloak:17.0.0
    build:
      context: .
      args:
        - 'KEYCLOAK_VERSION=17.0.0'
    command: start --optimized





# .keycloak.env
KEYCLOAK_ADMIN=admin
KEYCLOAK_ADMIN_PASSWORD=<cool_password>
KC_DB_SCHEMA=public
KC_DB_URL_HOST=postgres
KC_DB_URL_DATABASE=keycloak
KC_DB_USERNAME=keycloak
KC_DB_PASSWORD=<another_cool_password>
KC_HOSTNAME=id.<cool_domain>
KC_PROXY=edge

---------------------------------------------------------------------

https://conciso.de/keycloak-17/

docker run --rm \
-p 80:8080 \
-e KEYCLOAK_USER=admin \
-e KEYCLOAK_PASSWORD=admin \
quay.io/keycloak/keycloak:16.1.1

docker run --rm \
-p 80:8080 \
-e KEYCLOAK_ADMIN=admin \
-e KEYCLOAK_ADMIN_PASSWORD=admin \
quay.io/keycloak/keycloak:18.0.0 \
start-dev

docker run --rm \
-p 80:8080 \
quay.io/keycloak/keycloak:16.1.1

docker run --rm \
-p 80:8080 \
-e KC_HTTP_RELATIVE_PATH=auth \
quay.io/keycloak/keycloak:18.0.0 \
start-dev

---------------------------------------------------------------------

https://www.keycloak.org/server/containers


FROM quay.io/keycloak/keycloak:latest as builder

# Enable health and metrics support
ENV KC_HEALTH_ENABLED=true
ENV KC_METRICS_ENABLED=true

# Configure a database vendor
ENV KC_DB=postgres

WORKDIR /opt/keycloak
# for demonstration purposes only, please make sure to use proper certificates in production instead
RUN keytool -genkeypair -storepass password -storetype PKCS12 -keyalg RSA -keysize 2048 -dname "CN=server" -alias server -ext "SAN:c=DNS:localhost,IP:127.0.0.1" -keystore conf/server.keystore
RUN /opt/keycloak/bin/kc.sh build

FROM quay.io/keycloak/keycloak:latest
COPY --from=builder /opt/keycloak/ /opt/keycloak/

# change these values to point to a running postgres instance
ENV KC_DB=postgres
ENV KC_DB_URL=<DBURL>
ENV KC_DB_USERNAME=<DBUSERNAME>
ENV KC_DB_PASSWORD=<DBPASSWORD>
ENV KC_HOSTNAME=localhost
ENTRYPOINT ["/opt/keycloak/bin/kc.sh"]



---------------------------------------------------------------------

https://www.keycloak.org/server/logging



https://www.keycloak.org/2022/11/keycloak-2000-released.html
https://www.keycloak.org/docs/latest/upgrading/index.html#migrating-to-21-0-0
https://www.keycloak.org/docs/latest/upgrading/index.html#migrating-to-19-0-2
https://www.keycloak.org/docs/latest/upgrading/index.html#migration-changes
https://www.keycloak.org/2022/10/keycloak-1903-released
https://www.keycloak.org/2022/07/keycloak-1900-released
https://www.keycloak.org/2022/09/keycloak-1902-released.html

---------------------------------------------------------------------

https://github.com/keycloak/keycloak-ui/issues/3374

docker run --rm -it \
    -p 8080:8080 \
    -e KEYCLOAK_ADMIN=admin \
    -e KEYCLOAK_ADMIN_PASSWORD=admin \
    quay.io/keycloak/keycloak:nightly \
    start-dev \
   --http-enabled=true \
   --http-relative-path=auth \
   --hostname-strict=true \
   --hostname-strict-https=false \
   --hostname=keycloak.local \
   --hostname-admin=admin.local


http://admin.local:8080/auth/admin
http://keycloak.local:8080/auth/admin

http://keycloak.local:8080/auth
http://keycloak.local:8080/auth/admin/realms
http://admin.local:8080/auth/admin
http://keycloak.local:8080/auth/realms/master/account

---------------------------------------------------------------------

https://doc.traefik.io/traefik/master/routing/routers/
https://blog.sethcorker.com/traefik-routing-for-web-apps/

Host(`example.com`) || (Host(`example.org`) && !Path(`/traefik`)) && !PathPrefix(`/products`)



version: "3.8"

services:
  reverse-proxy:
    image: traefik:v2.4
    command: --api.insecure=true --providers.docker
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=false

  home:
    restart: always
    image: denoland/deno:1.11.2
    command: run --allow-net --allow-read --allow-env /app/server.ts
    labels:
      - traefik.http.routers.home.rule=Host(`deno-mfe.localhost`)
      - traefik.http.services.home.loadbalancer.server.port=8080
    environment:
      - APP_NAME=Home
    volumes:
      - ./app:/app

  shop:
    restart: always
    image: denoland/deno:1.11.2
    command: run --allow-net --allow-read --allow-env /app/server.ts
    labels:
      - traefik.http.routers.shop.rule=Host(`deno-mfe.localhost`) && PathPrefix(`/shop`)
      - traefik.http.services.shop.loadbalancer.server.port=8080
    environment:
      - APP_NAME=Shop
    volumes:
      - ./app:/app

  showcase:
    restart: always
    image: denoland/deno:1.11.2
    command: run --allow-net --allow-read --allow-env /app/server.ts
    labels:
      - traefik.http.routers.showcase.rule=Host(`deno-mfe.localhost`) && PathPrefix(`/showcase`)
      - traefik.http.services.showcase.loadbalancer.server.port=8080
    environment:
      - APP_NAME=Showcase
    volumes:
      - ./app:/app
    expose:
      - 8080

...

import { serve } from "https://deno.land/std@0.99.0/http/server.ts"

const port = parseInt(`${Deno.env.get("PORT")}`) || 8080
const appName = Deno.env.get("APP_NAME") || "Unknown"

const s = serve({ port })

for await (const req of s) {
  const headers = new Headers()
  headers.set("Content-Type", "text/html")
  req.respond({
    body: `
  <html>
    <h1>Hello from ${appName}</h1>
    <ul>
      <li><a href="/">Home</a>
      <li><a href="/shop">Shop</a>
      <li><a href="/showcase">Showcase</a>
    </ul>
  </html>
  `,
    headers,
  })
}



---------------------------------------------------------------------

docker-stack.yml traefik path prefix example

https://gist.github.com/mwaaas/03559bf7dac944d0951842b07a00a645
https://doc.traefik.io/traefik/routing/routers/
https://docs.k0sproject.io/v1.26.0+k0s.0/examples/traefik-ingress/


version: '3'
services:
  lb:
    image: traefik:latest
    command: >
      --web --docker --docker.swarmmode
      --docker.domain=traefik --docker.watch
      --accesslogsfile=/dev/stdout --logLevel=DEBUG
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/null:/traefik.toml
    ports:
      - "9000:80"
      - "9001:8080"
    deploy:
      placement:
        constraints:
          - node.role == manager

  nginx:
    image: 'nginx'
    deploy:
      labels:
        - "traefik.frontend.rule=PathPrefix:/"
        - "traefik.backend=nginx"
        - "traefik.port=80"
        - "traefik.weight=5"

  helloworld:
    image: dockercloud/hello-world
    deploy:
      labels:
        - "traefik.frontend.rule=PathPrefix:/hello/"
        - "traefik.backend=hello"
        - "traefik.port=80"
        - "traefik.weight=7"


























