

docker static ip examples


https://stackoverflow.com/questions/27937185/assign-static-ip-to-docker-container
https://docs.docker.com/engine/reference/commandline/network_create/
https://gist.github.com/zainengineer/6722174f6cb68080ae197fc757519f38
https://docs.docker.com/network/macvlan/
https://docs.docker.com/network/bridge/

docker network create --hostname local.dev --subnet=172.18.0.0/16 mynet123
docker run --net mynet123 --ip 172.18.0.22 -it ubuntu bash
ip addr


Additionally you could use

    --hostname to specify a hostname
    --add-host to add more entries to /etc/hosts


-----------------------------------------------------

https://github.com/docker/compose/issues/4336
https://docs.opnfv.org/en/stable-fraser/submodules/ipv6/docs/release/userguide/ipv6-in-container-networking.html

version : '3'

services:
  nginx:
    image: nginx
    networks:
          default:
            aliases:
              - aerogear.sistemasfamsaqa.com
networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet:  10.103.0.1/16




docker network ls
ip addr show

sudo docker network create \
              --driver=bridge \
              --subnet=172.18.0.0/24 \
              --gaeway= 172.18.0.1 \
              my_bridge

docker network inspect bridge
sysctl net.ipv4.conf.all.forwarding=1
sudo iptables -P FORWARD ACCEPT
systemctl reload docker

sudo docker network create --ipv6 --driver bridge alpine-net--fixed-cidr-v6 2001:db8:1/64
docker info

# Design Simple IPv6 Topologies
sudo docker network create \
              --ipv6 \
              --driver=bridge \
              --subnet=172.18.0.0/16 \
              --subnet=fcdd:1::/48 \
              --gaeway= 172.20.0.1  \
              my_ipv6_bridge

sudo docker network create \
              --ipv6 \
              --driver=bridge \
              --subnet=172.20.0.0/24 \
              --subnet=2002:ac14:0000::/48
              --gateway=172.20.0.1
              my_ipv6_bridge

docker network  inspect my_ipv6_bridge

docker run -it ubuntu bash

docker create --name my-nginx \
                --network my-net \
                --publish 8080:80 \
                nginx:latest

docker network connect my_ipv6_bridge my-nginx
docker run -i -t nginx:latest /bin/bash
docker ps
ping6 bc13944d22e1
ip addr
ip r
docker network disconnect my_ipv6_bridge my-nginx
-----------------------------------------------------



version: '2'
services:
  nginx:
    image: nginx
    container_name: nginx-container
    networks:
      static-network:
        ipv4_address: 172.20.128.2
networks:
  static-network:
    ipam:
      config:
        - subnet: 172.20.0.0/16
          #docker-compose v3+ do not use ip_range
          ip_range: 172.28.5.0/24

from host you can test using:

docker-compose up -d
curl 172.20.128.2

-----------------------------------------------------
https://serverfault.com/questions/970553/docker-compose-static-ip-does-not-work
https://jpetazzo.github.io/2013/10/16/configure-docker-bridge-network/

ifconfig

version: '3'
services:
  web:
      container_name: nginx
      image: nginx:latest
      ports:
        - "9000:80"
      volumes:
        - .:/var/www/html/resta
        - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf
      networks:
        default:
            ipv4_address: 172.25.0.9
  redis:
      container_name: redis
      image: redis
      ports:
      - "6379:6379"
  mysql:
      container_name: mysql
      image: mysql
      ports:
        - "33061:3306"
        - "3306:3306"
      volumes:
        - ./docker/mysql:/var/lib/mysql
      restart: always
      environment:
          MYSQL_ROOT_PASSWORD: password
  php:
      container_name: php
      build: docker
      image: php:fpm
      volumes:
      - .:/var/www/html/resta
networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24























-----------------------------------------------------

docker run --name dns --restart=always -d -p 172.16.177.20:53:53/udp dns
docker run --name registry --restart=always -d -p 172.16.177.12:80:5000 registry
docker run --name cache --restart=always -d -p 172.16.177.13:80:3142 -v /data/cache:/var/cache/apt-cacher-ng cache
docker run --name mirror --restart=always -d -p 172.16.177.19:80:80 -v /data/mirror:/usr/share/nginx/html:ro mirror


Create a network
docker network create --subnet=172.17.0.0/16 selnet
Run
docker image docker run --net selnet --ip 172.18.0.2 hub


docker run --cap-add=NET_ADMIN -dit imagename /bin/sh -c "/sbin/ip addr add 172.17.0.12 dev eth0; bash"

---
https://www.cloudsavvyit.com/14508/how-to-assign-a-static-ip-to-a-docker-container/

docker run --net customnetwork --ip 172.20.0.10 -d container
docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' name_or_id

version: '2'
services:
  webserver:
    image: nginx
    container_name: web-server
    networks:
      customnetwork:
        ipv4_address: 172.20.0.10
networks:
  customnetwork:
    ipam:
      config:
        - subnet: 172.20.0.0/16



---------------------------------------------------------------------------------------
https://forums.docker.com/t/how-to-configure-docker-networking-with-docker-compose-to-enable-remote-access-to-docker-container-via-ip/96990

version: "3.5"
services:
  nginx:
    networks:
      nw_containers:
        ipv4_address: 10.5.0.2
    expose:
      - "80"
      - "8080"
      - "1883"
      - "9001"
    ports:
      - "80:8000"
      - "8000:8000"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - django
      - mosquitto
  db:
    networks:
      nw_containers:
        ipv4_address: 10.5.0.3
  django:
    networks:
      nw_containers:
        ipv4_address: 10.5.0.4
  mosquitto:
    networks:
      nw_containers:
        ipv4_address: 10.5.0.5
networks:
  nw_containers:
    external:
      name: custom_bridge


....



version: "3.5"
services:
  nginx:
    image: nginx:1.17.9-alpine
    hostname: nginx
    container_name: c_nginx
    networks:
      - nw_containers
    ports:
      - "80:80"
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./edge_frontend/www:/var/www
      - ./backend/edge_backend/static:/var/www/static:ro
    depends_on:
      - django
      - mosquitto
  mosquitto:
    image: eclipse-mosquitto:1.6.8
    hostname: mosquitto
    container_name: c_mosquitto
    networks:
      - nw_containers
    # ensure correct permissions: sudo chown -R 1883:1883 ./mosquitto/
    user: 1883:1883
    environment:
      - PUID=1883
      - PGID=1883
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/logs:/mosquitto/log
  redis:
    image: redis:5.0.7-alpine
    hostname: redis
    container_name: c_redis
    networks:
      - nw_containers
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
  database:
    image: postgres:12.0-alpine
    hostname: database
    container_name: c_database
    networks:
      - nw_containers
    environment:
      - POSTGRES_USER=blub
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=blub
    volumes:
      - postgres_data:/var/lib/postgresql/data/
  django:
    build:
      context: ./backend
    entrypoint:
      - /code/entrypoint.sh
    command: daphne --bind 0.0.0.0 -p 8080 edge_backend.asgi:application
    stdin_open: true
    tty: True
    hostname: django
    container_name: c_django
    networks:
      - nw_containers
    volumes:
      - ./backend/edge_backend:/code/edge_backend/
      - ./backend/aos_fixture.json:/code/aos_fixture.json:ro
      - ./backend/entrypoint.sh:/code/entrypoint.sh:ro
      - ./data/config:/mnt/data/config
      - ./data/model:/mnt/data/model
    depends_on:
      - mosquitto
      - redis
      - database
networks:
  # docker network create -d bridge custom_bridge:
  # subnet: 172.18.0.0/16
  # gateway: 172.18.0.1
  nw_containers:
    external:
      name: custom_bridge
volumes:
  postgres_data:



$ docker network inspect custom_bridge

-------------------------------------------------------
https://github.com/moby/moby/issues/37823

docker network inspect
cat /etc/docker/daemon.json
ip addr | grep 172

version: "3.2"
services:

  api:
    image: registry.example.net/project/api:latest
    tty: true
    depends_on:
      - "postgres"
      - "redis"
      - "elasticsearch-145"
      - "mailcatcher"
      - "api-uploads"
      - "memcached"
      - "elasticsearch"
    networks:
      default:
        aliases:
          - "api-alias"
          - "api-alias1"
          - "proxy1"
          - "proxy2"
          - "proxy3"
          - "proxy4"
          - "proxy5"
          - "proxy6"
          - "proxy7"
          - "proxy8"
          - "proxy9"
    volumes:
      - "labels:/var/www/html/labels"
      - "logos:/var/www/html/logos"
      - "invoices:/var/www/html/invoices"
      - "sepa:/var/www/html/sepa"
      - "storage:/var/www/html/storage"
      - "uploads:/var/www/html/uploads"
      - "direct_debit_forms:/var/www/html/direct_debit_forms"
      - "bank_transactions:/var/www/html/bank_transactions"
      - "rsa-keys:/var/www/html/config/rsa-keys"
    environment:
      - ENVIRONMENT=prod
      - PLASTIC_HOST=elasticsearch
      - MEMCACHED_HOST=memcached
      - NEW_RELIC_LICENSE=foo
      - BLACKFIRE_SERVER_ID=bar
      - BLACKFIRE_SERVER_TOKEN=baz

  api-proxy:
    image: registry.example.net/project/api-proxy:latest
    tty: true
    depends_on:
      - "api"
    environment:
      - ENVIRONMENT=prod

  api-uploads:
    image: nginx:alpine
    volumes:
      - "uploads:/usr/share/nginx/html"

  ui:
    image: registry.example.net/project/ui:latest
    depends_on:
      - "api"
      - "frontoffice"
      - "assets1"
    networks:
      default:
      assets3:
    environment:
      - FOO=false

  admin:
    image: registry.example.net/project/admin:latest
    depends_on:
      - "api"
    environment:
      - FOO=false

  assets2:
    image: registry.example.net/project/assets2:latest
    networks:
      default:
      assets2:
        aliases:
          - "assets"

  assets3:
    image: registry.example.net/project/assets3:latest
    networks:
      default:
      assets3:
        aliases:
          - "assets"

  assets1:
    image: registry.example.net/project/assets1:latest
    networks:
      default:
      assets1:
        aliases:
          - "assets"

  meteor2:
    image: registry.example.net/project/meteor2:latest
    tty: true
    depends_on:
      - "mongodb"
      - "api"
      - "assets2"
    networks:
      default:
      assets2:
    environment:
      - ENVIRONMENT=prod
      - NPM_CONFIG_LOGLEVEL=verbose
      - MONGO_URL=mongodb://mongodb/meteor2
      - MAIL_URL=smtp://mailcatcher:1025/
      - ROOT_URL=https://meteor2.example.com
      - PORT=3000
      - NODE_ENV=${ENVIRONMENT}

  meteor3:
    image: registry.example.net/project/meteor3:latest
    tty: true
    depends_on:
      - "mongodb"
      - "api"
      - "assets3"
    networks:
      default:
      assets3:
    environment:
      - ENVIRONMENT=prod
      - NPM_CONFIG_LOGLEVEL=verbose
      - MONGO_URL=mongodb://mongodb/meteor3
      - MAIL_URL=smtp://mailcatcher:1025/
      - ROOT_URL=https://meteor3.example.com
      - PORT=3000
      - NODE_ENV=${ENVIRONMENT}

  frontoffice1:
    image: registry.example.net/project/frontoffice1:latest
    tty: true
    depends_on:
      - "api"
    networks:
      default:
        aliases:
          - "frontoffice"

  registration:
    image: registry.example.net/project/registration:latest
    tty: true
    depends_on:
      - "mongodb"
      - "api"
    environment:
      - ENVIRONMENT=prod
      - NPM_CONFIG_LOGLEVEL=verbose
      - MONGO_URL=mongodb://mongodb/registration
      - MAIL_URL=smtp://mailcatcher:1025/
      - ROOT_URL=https://registration.example.com
      - PORT=3000
      - NODE_ENV=${ENVIRONMENT}

  corporate:
    image: registry.example.net/project/corporate:latest
    depends_on:
      - "api-proxy"
    environment:
      - FOO=false
      - TZ=CET-1CEST,M3.5.0,M10.5.0/3

  corporate2:
    image: registry.example.net/project/corporate2:latest
    environment:
      - TZ=CET-1CEST,M3.5.0,M10.5.0/3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.1
    networks:
      default:
        aliases:
          - "elasticsearch"
          - "es6"
          - "es61"
    volumes:
      - "elasticsearch-data:/usr/share/elasticsearch/data"
    environment:
      - TZ=CET-1CEST,M3.5.0,M10.5.0/3

#  kibana:
#    image: docker.elastic.co/kibana/kibana:6.2.1
#    depends_on:
#      - "elasticsearch"

  elasticsearch-145:
    image: airdock/elasticsearch:1.4
    networks:
      default:
        aliases:
        - "es"
        - "es1"
    volumes:
      - "elasticsearch-145-data:/usr/share/elasticsearch/data"
    environment:
      - TZ=CET-1CEST,M3.5.0,M10.5.0/3

  mailcatcher:
    image: registry.example.net/project/mailcatcher

  memcached:
    image: memcached:1.5

  mongodb:
    image: mongo:3.4
    networks:
      default:
        aliases:
          - "mongodb"
          - "md"
          - "md1"
    volumes:
      - "mongodb-data:/data/db"
    environment:
      - TZ=CET-1CEST,M3.5.0,M10.5.0/3

  postgres:
    image: postgres:9.6
    networks:
      default:
        aliases:
          - "postgres"
          - "pg"
          - "pg1"
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
    environment:
      - POSTGRES_USER=foo
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=project

  redis:
    image: redis:2.8
    networks:
      default:
        aliases:
          - "redis"
          - "rd"
          - "rd1"
    volumes:
      - "redis-data:/data"
    environment:
      - TZ=CET-1CEST,M3.5.0,M10.5.0/3

  swagger:
    image: swaggerapi/swagger-ui
    environment:
      - API_URL=http://api.${ENVIRONMENT}.example.com/swagger.json

volumes:
  postgres-data:
  elasticsearch-data:
  elasticsearch-145-data:
  redis-data:
  mongodb-data:
  labels:
  logos:
  invoices:
  sepa:
  storage:
  uploads:
  direct_debit_forms:
  bank_transactions:
  rsa-keys:

networks:
  default:
  assets2:
  assets3:
  assets1: